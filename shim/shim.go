// Copyright 2017 Josh Komoroske. All rights reserved.
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE.txt file.

// Package shim implements functions for rendering the Terraform shim.
package shim

import (
	"bytes"
	"strconv"
	"text/template"
)

const (
	body = `/**
 * Code generated by github.com/joshdk/tfbundle.
 */

output "etag" {
  description = "Entity tag for the bundled file. Used as a pass-through when configuring aws.s3_bucket_object.etag."
  value       = "${md5(file("${path.module}/artifact/{{ .Artifact }}"))}"
}

output "filename" {
  description = "Absolute path to the bundled file."
  value       = "${path.module}/artifact/{{ .Artifact }}"
}

output "size" {
  description = "Size in bytes of the bundled file."
  value       = "{{ .Size }}"
}

output "source_code_hash" {
  description = "Content hash for the bundled file. Used as a pass-through when configuring aws.lambda_function.source_code_hash."
  value       = "${base64sha256(file("${path.module}/artifact/{{ .Artifact }}"))}"
}
`
)

var (
	tpl = template.Must(template.New("main.tf").Parse(body))
)

//Render templates the given file name over the Terraform shim.
func Render(content []byte, file string) ([]byte, error) {
	var (
		buf bytes.Buffer
		ctx = map[string]string{
			"Artifact": file,
			"Size":     strconv.Itoa(len(content)),
		}
	)

	if err := tpl.Execute(&buf, ctx); err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}
